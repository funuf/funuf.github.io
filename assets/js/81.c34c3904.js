(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{468:function(t,a,e){"use strict";e.r(a);var r=e(23),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"cap原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cap原则"}},[t._v("#")]),t._v(" CAP原则")]),t._v(" "),e("p",[t._v("CAP原则又称CAP定理，指的是在一个分布式系统中，一致性 （ Consistency ） 、 可 用 性 （ Availability ） 和 分 区 容 错 性（Partition tolerance）三者不可兼得。")]),t._v(" "),e("p",[t._v("◎ 一致性：在分布式系统的所有数据备份中，在同一时刻是否有同样的值（等同于所有节点都访问同一份最新的数据副本）。")]),t._v(" "),e("p",[t._v("◎ 可用性：在集群中一部分节点发生故障后，集群整体能否响应客户端的读写请求（对数据更新具备高可用性）。")]),t._v(" "),e("p",[t._v("◎ 分区容错性（分区冗余性）")]),t._v(" "),e("blockquote",[e("p",[t._v("一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。")]),t._v(" "),e("p",[t._v("当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。")]),t._v(" "),e("p",[t._v("提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。")]),t._v(" "),e("p",[t._v("然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。")]),t._v(" "),e("p",[t._v("总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。")])]),t._v(" "),e("h2",{attrs:{id:"base理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/8624f50cd1f9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Base理论的通俗解释"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("简单地来说BASE理论的思想是：系统可能处于不一致的状态，但最终会变得一致。")])])}),[],!1,null,null,null);a.default=s.exports}}]);