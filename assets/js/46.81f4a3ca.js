(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{496:function(t,e,s){"use strict";s.r(e);var a=s(23),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"软件列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#软件列表"}},[t._v("#")]),t._v(" 软件列表")]),t._v(" "),s("h3",{attrs:{id:"wordpress"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wordpress"}},[t._v("#")]),t._v(" WordPress")]),t._v(" "),s("p",[s("a",{attrs:{href:"/it/devops/docker-compose/Wordpress"}},[t._v("WordPress--传送门")])]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("Java：一次编译，到处运行")]),t._v(" "),s("p",[t._v("Docker（容器化部署）：真正实现一次编译，到处运行")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" --help\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build\n")])])]),s("h3",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker1.png"}}),t._v(" "),s("p",[t._v("VM虚拟机技术：虚拟出一套硬件后，在其上运行一个完整的操作系统。")]),t._v(" "),s("p",[t._v("Docker容器技术：容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，也没有进行硬件的虚拟。")]),t._v(" "),s("p",[t._v("VM中的进程能够使用的资源受给vm分配的上限所限，Docker中的进行能够充分使用宿主机的所有资源（CPU/内存）。")]),t._v(" "),s("p",[t._v("因此Docker技术比虚拟机技术更为轻便、快捷。")]),t._v(" "),s("p",[t._v("Docker使用的分层存储以及镜像技术，使得应用重复部分的复用更加容易。")]),t._v(" "),s("h3",{attrs:{id:"优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),s("ol",[s("li",[t._v("更高效的利用系统资源")]),t._v(" "),s("li",[t._v("更快的启动时间")]),t._v(" "),s("li",[t._v("一致的运行环境")]),t._v(" "),s("li",[t._v("持续交付和部署")]),t._v(" "),s("li",[t._v("更轻松的迁移")]),t._v(" "),s("li",[t._v("更轻松的维护和扩展")])]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("h3",{attrs:{id:"引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引擎"}},[t._v("#")]),t._v(" 引擎")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker_engine.png"}}),t._v(" "),s("h3",{attrs:{id:"架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker_architecture.png"}}),t._v(" "),s("h3",{attrs:{id:"镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[t._v("#")]),t._v(" 镜像")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker_image.png"}}),t._v(" "),s("h3",{attrs:{id:"容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker_container.png"}}),t._v(" "),s("h3",{attrs:{id:"仓库-镜像托管平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#仓库-镜像托管平台"}},[t._v("#")]),t._v(" 仓库（镜像托管平台）")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker_registry.png"}}),t._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网安装"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("检查是否安装")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version\n")])])]),s("h3",{attrs:{id:"ubuntu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu"}},[t._v("#")]),t._v(" Ubuntu")]),t._v(" "),s("p",[s("strong",[t._v("脚本安装")]),t._v("（适用于CentOS）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL https://get.docker.com -o get-docker.sh\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" get-docker.sh --mirror Aliyun\n \n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),s("h3",{attrs:{id:"centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos"}},[t._v("#")]),t._v(" CentOS")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 卸载旧版本")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum remove "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-client "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-client-latest "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-common "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-latest "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-latest-logrotate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-logrotate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-engine\n                  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 需要的安装包")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y yum-utils\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 设置镜像仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum-config-manager "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --add-repo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    https://download.docker.com/linux/centos/docker-ce.repo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认是国外地址")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum-config-manager "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --add-repo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 阿里云镜像")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4. 更新yum软件包索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum makecache fast\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5. 安装Docker  docker-ce 社区版   ee企业版")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce docker-ce-cli containerd.io\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6. 启动docker")]),t._v("\nsystemctl start "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 7. 使用docker version查看是否安装成功")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@qcsd-ecs-dev-001 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker version")]),t._v("\nClient: Docker Engine - Community\n Version:           "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19.03")]),t._v(".11\n API version:       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.40")]),t._v("\n Go version:        go1.13.10\n Git commit:        42e35e61f3\n Built:             Mon Jun  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 09:13:48 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("\n OS/Arch:           linux/amd64\n Experimental:      "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\nServer: Docker Engine - Community\n Engine:\n  Version:          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19.03")]),t._v(".11\n  API version:      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.40")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimum version "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Go version:       go1.13.10\n  Git commit:       42e35e61f3\n  Built:            Mon Jun  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 09:12:26 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("\n  OS/Arch:          linux/amd64\n  Experimental:     "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n containerd:\n  Version:          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".13\n  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429\n runc:\n  Version:          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(".0-rc10\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\n docker-init:\n  Version:          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.18")]),t._v(".0\n  GitCommit:        fec3683\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 8. hello-world程序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run hello-world\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 9. 查看hello-world镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@qcsd-ecs-dev-001 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker images")]),t._v("\nREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZE\nregistry.cn-qingdao.aliyuncs.com/qcsd/tpns             latest              b5994daf8bb4        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v(" hours ago        317MB\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 10. 卸载Docker")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 卸载依赖")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum remove docker-ce docker-ce-cli containerd.io\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 删除资源")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/docker\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/containerd\n")])])]),s("h3",{attrs:{id:"镜像加速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像加速"}},[t._v("#")]),t._v(" 镜像加速")]),t._v(" "),s("p",[t._v("提升获取Docker官方镜像的速度")]),t._v(" "),s("h4",{attrs:{id:"编辑文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑文件"}},[t._v("#")]),t._v(" 编辑文件")]),t._v(" "),s("p",[t._v("于"),s("code",[t._v("/etc/docker/daemon.json")]),t._v("中写入：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"registry-mirrors"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://registry.docker-cn.com"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),s("h4",{attrs:{id:"命令式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令式"}},[t._v("#")]),t._v(" 命令式")]),t._v(" "),s("p",[t._v("在阿里云控制台搜索  容器镜像服务--镜像工具--镜像加速器")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /etc/docker\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/docker/daemon.json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<-")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'EOF\'\n{\n  "registry-mirrors": ["https://ftc7wwc6.mirror.aliyuncs.com"]\n}\nEOF')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),s("h2",{attrs:{id:"镜像基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像基础"}},[t._v("#")]),t._v(" 镜像基础")]),t._v(" "),s("h3",{attrs:{id:"下载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载"}},[t._v("#")]),t._v(" 下载")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image pull --help\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull --help\n")])])]),s("p",[t._v("从下载过程中可以看出镜像是由多层存储构成的，下载也是一层一层，并非单一文件。")]),t._v(" "),s("p",[t._v("下载过程中给出了每一层的ID的前12位，下载结束后，给出该镜像的完整的sha256的摘要，以确保下载一致性。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("hellofun@hellofun-Deepin:~$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ubuntu:16.04 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 镜像id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("镜像名:标签"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -q redis"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n")])])]),s("h3",{attrs:{id:"联合文件系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联合文件系统"}},[t._v("#")]),t._v(" 联合文件系统")]),t._v(" "),s("p",[t._v("联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统的修改信息作为一次提交，并层层叠加，\n同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。")]),t._v(" "),s("p",[t._v("联合文件系统是实现Docker镜像的技术基础，Docker镜像可以通过分层来进行继承。")]),t._v(" "),s("h3",{attrs:{id:"镜像体积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像体积"}},[t._v("#")]),t._v(" 镜像体积")]),t._v(" "),s("p",[t._v("Docker Hub 中显示的体积是压缩后的体积。在镜像上传和下载过程中镜像是保持着压缩状态的。")]),t._v(" "),s("p",[t._v("而docker image ls 显示的是镜像下载到本地后，解压缩后的大小。")]),t._v(" "),s("p",[t._v("另外，docker image ls列表中的镜像体积总和并非是所有镜像实际的硬盘小号，由于Docker使用UnionFS，相同的层只需要保存一份即可，因此实际的硬盘占用比列表之和要小的多。")]),t._v(" "),s("p",[t._v("所有的镜像和容器都存储在Docker指定的存储目录下，默认路径是/var/lib/docker。")]),t._v(" "),s("h3",{attrs:{id:"虚悬镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚悬镜像"}},[t._v("#")]),t._v(" 虚悬镜像")]),t._v(" "),s("p",[t._v("虚悬镜像（dangling image） ，即没有仓库名，也没有标签的镜像。")]),t._v(" "),s("p",[t._v("原来的镜像名称和标签被新下载（pull latest）/新构建（build 同版本）的最新镜像占用了，原来的镜像就成了虚悬镜像。一般来说，虚悬镜像已经失去了存在的价值。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("docker image ls -f dangling=true")]),t._v("进行查看；使用 "),s("code",[t._v("docker image prune")]),t._v("进行删除。")]),t._v(" "),s("h3",{attrs:{id:"中间层镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间层镜像"}},[t._v("#")]),t._v(" 中间层镜像")]),t._v(" "),s("p",[t._v("为了加速镜像构建、重复利用资源，Docker会利用中间层镜像。")]),t._v(" "),s("p",[t._v("默认的docker image ls列表只会显示顶层镜像，如果需要显示包括中间层镜像的所有镜像的话，需要docker image ls -a 会看到很多无标签的镜像。")]),t._v(" "),s("p",[t._v("与虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，被其他的镜像所依赖。因此这些无标签镜像不应该删除也不用删除。")]),t._v(" "),s("h2",{attrs:{id:"镜像构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建"}},[t._v("#")]),t._v(" 镜像构建")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网指导"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"build-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-context"}},[t._v("#")]),t._v(" Build Context")]),t._v(" "),s("p",[t._v("Docker Client 会把build context 发送给Docker Daemon。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#understand-build-context",target:"_blank",rel:"noopener noreferrer"}},[t._v("构建上下文"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),s("p",[t._v("Dockerfile是一个文本文件，其内容包含了一条条指令（Instruction），每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),t._v(" "),s("h3",{attrs:{id:"from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#from",target:"_blank",rel:"noopener noreferrer"}},[t._v("FROM"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("除了选择现有镜像为基础镜像之外，Docker还存在一个特殊的镜像，名为scratch，它表示一个空白的镜像。")]),t._v(" "),s("p",[t._v("如果以scratch作为基础镜像，则意味着不以任何镜像为基础，接下来所写的指令作为镜像第一层开始存在。")]),t._v(" "),s("h3",{attrs:{id:"run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#run",target:"_blank",rel:"noopener noreferrer"}},[t._v("RUN"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("两种写法：shell格式和exec格式")]),t._v(" "),s("p",[t._v("RUN命令会在启动容器，并执行命令，命令执行后的结果将会被commit，后续步骤将基于本次RUN的结果。")]),t._v(" "),s("blockquote",[s("p",[t._v("The RUN instruction will execute any commands in a new layer on top of the current image and commit the results.")]),t._v(" "),s("p",[t._v("The resulting committed image will be used for the next step in the Dockerfile.")])]),t._v(" "),s("p",[t._v("因此，如果在使用Dockerfile构建镜像时，若RUN指令失败，则会出现docker虚悬镜像和该虚悬镜像的container。")]),t._v(" "),s("h3",{attrs:{id:"workdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#workdir",target:"_blank",rel:"noopener noreferrer"}},[t._v("WORKDIR"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("使用WORKDIR指令可以来指定工作目录（或称之为当前目录），以后各层的当前目录被改为指定的目录。如果目录不存在，则WORKDIR 会创建目录。")]),t._v(" "),s("p",[t._v("在Shell中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态会直接影响后一个命令。")]),t._v(" "),s("p",[t._v("而Dockerfile中，每个命令对应新的一层，连续两个RUN不可能继承前一层构建过程中的内存变化。")]),t._v(" "),s("p",[t._v("因此要使用WORKDIR指令改变后续各层的工作目录的位置。")]),t._v(" "),s("h3",{attrs:{id:"copy-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-add"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy",target:"_blank",rel:"noopener noreferrer"}},[t._v("COPY ADD"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("COPY：文件复制")]),t._v(" "),s("p",[t._v("ADD：压缩包自动解压；支持远程文件（URL）")]),t._v(" "),s("h3",{attrs:{id:"cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMD"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在容器中启动一个软件，一个Dockerfile文件中只能有一个CMD指令。")]),t._v(" "),s("blockquote",[s("p",[t._v("run the software contained in your image, along with any arguments.")]),t._v(" "),s("p",[t._v("There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.")])]),t._v(" "),s("h3",{attrs:{id:"expose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#expose",target:"_blank",rel:"noopener noreferrer"}},[t._v("EXPOSE"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("指定容器监听的端口。")]),t._v(" "),s("p",[t._v("The EXPOSE instruction indicates the ports on which a container listens for connections.")]),t._v(" "),s("h3",{attrs:{id:"env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#env",target:"_blank",rel:"noopener noreferrer"}},[t._v("ENV"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("设置环境变量，后续部分指令可以展开环境变量（使用自己定义的环境变量的值）")]),t._v(" "),s("p",[t._v("-p 宿主端口:容器端口")]),t._v(" "),s("p",[t._v("-P 随机映射宿主机的端口 到 容器端口")]),t._v(" "),s("blockquote",[s("p",[t._v("To make new software easier to run, you can use ENV to update the PATH environment variable for the software your container installs.")]),t._v(" "),s("p",[t._v('For example, ENV PATH=/usr/local/nginx/bin:$PATH ensures that CMD ["nginx"] just works.')]),t._v(" "),s("p",[t._v("The ENV instruction sets the environment variable key to the value .")]),t._v(" "),s("p",[t._v("This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well.")])]),t._v(" "),s("h3",{attrs:{id:"volume"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#volume",target:"_blank",rel:"noopener noreferrer"}},[t._v("VOLUME"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("定义匿名数据卷：指定容器中的特定目录，会被持久化到宿主机上。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/51kata/p/5266626.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("说明"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact",target:"_blank",rel:"noopener noreferrer"}},[t._v("ENTRYPOINT"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("ENTRYPOINT 和 CMD 都用于为容器启动后指定默认的程序入口")]),t._v(" "),s("p",[t._v("命令行参数（docker run xxx携带的参数）：")]),t._v(" "),s("ol",[s("li",[t._v("会追加到ENTRYPOINT的末尾")]),t._v(" "),s("li",[t._v("会替换掉CMD")]),t._v(" "),s("li",[t._v("如果ENTRYPOINT和CMD同时存在，后者将作为前者的参数")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/sparkdev/p/8461576.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ENTRYPOINT与CMD的区别"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"build命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build命令"}},[t._v("#")]),t._v(" build命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t namexxx:tagxxx "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t namexxx:tagxxx -f pathxxx/Dockerfile\n")])])]),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('FROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -rf *\nRUN echo "Hello Docker" > index.html\n')])])]),s("h2",{attrs:{id:"volume-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume-2"}},[t._v("#")]),t._v(" Volume")]),t._v(" "),s("p",[t._v("容器内指定目录的"),s("a",{attrs:{href:"https://docs.docker.com/get-started/05_persisting_data/",target:"_blank",rel:"noopener noreferrer"}},[t._v("持久化技术"),s("OutboundLink")],1),t._v(" 。")]),t._v(" "),s("p",[t._v("所有的docker容器内的卷，在没有指定目录的情况下，在宿主的"),s("code",[t._v("/var/lib/docker/volumes/xxx/_data")]),t._v("目录。")]),t._v(" "),s("p",[t._v("使用数据卷的三种姿势：")]),t._v(" "),s("ol",[s("li",[t._v("匿名")]),t._v(" "),s("li",[t._v("具名")]),t._v(" "),s("li",[t._v("宿主目录")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/51kata/p/5266626.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("说明"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),s("p",[t._v("Docker的网络系统是 "),s("a",{attrs:{href:"https://docs.docker.com/network/#network-drivers",target:"_blank",rel:"noopener noreferrer"}},[t._v("插件化"),s("OutboundLink")],1),t._v(" 的，可用的网络驱动大致可分为：")]),t._v(" "),s("ol",[s("li",[t._v("默认桥接：宿主机与容器不再同一个网段")]),t._v(" "),s("li",[t._v("用户创建的桥接：常用，支持DNS解析（根据机器名进行互相访问）及其他"),s("a",{attrs:{href:"https://docs.docker.com/network/bridge/#differences-between-user-defined-bridges-and-the-default-bridge",target:"_blank",rel:"noopener noreferrer"}},[t._v("优势"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("host：与宿主机不存在网络个例")]),t._v(" "),s("li",[t._v("overlay：跨宿主机的容器之间的通信，如docker swarm（少用）")]),t._v(" "),s("li",[t._v("ipvlan：少用")]),t._v(" "),s("li",[t._v("macvlan：少用")]),t._v(" "),s("li",[t._v("third-party network plugin")])]),t._v(" "),s("h3",{attrs:{id:"linux网络虚拟化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux网络虚拟化"}},[t._v("#")]),t._v(" Linux网络虚拟化")]),t._v(" "),s("p",[t._v("Docker的本地网络实现其实就是利用了Linux上的网络命名空间和虚拟网络设备（特别是veth pair）。")]),t._v(" "),s("p",[t._v("直观上看，要实现网络通信，机器上需要至少一个网络接口（物理接口或虚拟接口）与外界相通，并可以收发数据包；此外，如果不同子网之间需要通信，还需要额外的路由转发控制。")]),t._v(" "),s("p",[t._v("Docker中的网络接口默认都是虚拟接口。虚拟接口的最大优势就是转发效率极高。")]),t._v(" "),s("p",[t._v("这是因为Linux通过在内核中进行数据复制来实现虚拟接口之间的数据转发：即发送接口的发送缓存中的数据将被直接复制到接收接口的接收缓存中，\n而无需通过外部物理网络设备进行交换。")]),t._v(" "),s("p",[t._v("对于本地系统和容器内系统来看，虚拟接口跟一个正常的以太网卡相比并无区别，只是它的速度要快的多。")]),t._v(" "),s("imgv",{attrs:{v:"/img/docker/docker0.jpg"}}),t._v(" "),s("p",[t._v("网络创建过程：")]),t._v(" "),s("ol",[s("li",[t._v("Docker创建一个容器的时候，会创建一对虚拟接口，分别放到本地主机和新容器的命名空间中")]),t._v(" "),s("li",[t._v("本地主机一端的虚拟接口连接到默认的docker0网桥（或指定网桥上），并具有一个以veth开头的唯一名字，如veth1234")]),t._v(" "),s("li",[t._v("容器一端的虚拟接口将放在新建的容器中，并修改名字为eth0，这个接口只在容器的命名空间可见")]),t._v(" "),s("li",[t._v("从网桥可用地址段中获取一个空闲地址分配给容器的eth0，并配置容器内的默认 路由网关为docker0网卡的内部接口docker0的IP地址")]),t._v(" "),s("li",[t._v("完成上述步骤后，容器就可以使用它所能看到的eth0虚拟网卡来连接其他容器和访问外部网络")])]),t._v(" "),s("h3",{attrs:{id:"桥接模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[t._v("#")]),t._v(" 桥接模式")]),t._v(" "),s("p",[t._v("桥接网络适用于运行在同一Docker守护程序主机上的容器。对于在不同的Docker守护程序主机上运行的容器之间的通信，可以使用overlay模式。")]),t._v(" "),s("p",[t._v("网桥在数据链路层上实现局域网互连，对接收的帧要先存储和查找站表，然后转发（这就增加了时延）。")]),t._v(" "),s("p",[t._v("网桥也叫桥接器，是连接两个局域网的一种存储/转发设备，它能将一个大的LAN分割为多个网段，或将两个以上的LAN互联为一个逻辑LAN，使LAN上的所有用户都可访问服务器。")]),t._v(" "),s("p",[t._v("网桥可以是专门硬件设备，也可以由计算机加装的网桥软件来实现，这时计算机上会安装多个网络适配器（网卡）。")]),t._v(" "),s("p",[t._v("当使用网桥连接两段LAN时，网桥对来自网段1的MAC 帧，首先要检查其终点地址。如果该帧是发往网段1 上某一站的，网桥则不将帧转发到网段2 ，而将其滤除；如果该帧是发往网段2 上某一站的，网桥则将它转发到网段2。")]),t._v(" "),s("p",[t._v("网桥工作在数据链路层，将两个LAN连起来，根据MAC地址来转发帧，可以看作一个“低层的路由器”（路由器工作在网络层，根据网络地址如IP地址进行转发）。")]),t._v(" "),s("p",[t._v("数据链路层互联的设备是网桥(bridge)，在网络互联中它起到数据接收、地址过滤与数据转发的作用，用来实现多个网络系统之间的数据交换。")]),t._v(" "),s("p",[t._v("在网络方面，桥网络是一种链路层设备，其在网段之间转发流量。桥梁可以是在主机内核中运行的硬件设备或软件设备。")]),t._v(" "),s("p",[t._v("在Docker方面，桥接网络使用软件桥，该软件桥允许连接到同一桥网络的容器进行通信，同时提供从未连接到该桥网络的容器的隔离。")]),t._v(" "),s("h3",{attrs:{id:"docker0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker0"}},[t._v("#")]),t._v(" Docker0")]),t._v(" "),s("p",[t._v("Docker服务启动时会首先在宿主机上自动创建一个docker0虚拟网桥，实际上是一个Linux网桥，它在内核层连通了其他的物理或虚拟网卡。")]),t._v(" "),s("p",[t._v("网桥可以理解为一个软件交换机，负责不同网段之间的数据转发（负责挂载其上的接口之间进行包转发），物理网桥工作在数据链路层。")]),t._v(" "),s("p",[t._v("同时，Docker随机分配一个本地未占用的私有网段中的一个地址给docker0接口。比如典型的172.17.0.0/16网段，掩码为255.255.0.0。此后启动的容器内的网络也会自动分配一个该网段的网址。")]),t._v(" "),s("p",[t._v("当创建一个Docker容器的时候，同时会创建一对veth pair互联接口。当像任一个接口发送包时，另外一个接口自动收到相同的包。")]),t._v(" "),s("p",[t._v("互联接口的一端位于容器内，即eth0；另一端在本地并被挂载到docker0网桥，名称yiveth开头。")]),t._v(" "),s("p",[t._v("通过这种方式，主机可以与容器通信，容器之间也可以相互通信。如此一来，Docker就创建了在主机和所有容器之间的虚拟共享网络。")]),t._v(" "),s("h3",{attrs:{id:"veth-pair"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#veth-pair"}},[t._v("#")]),t._v(" veth-pair")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/bjtime/p/10773490.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细说明"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://askingthelot.com/what-is-veth-pair/",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://askinglot.com/what-is-veth-pair",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://man7.org/linux/man-pages/man4/veth.4.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("3"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://www.packetcoders.io/virtual-networking-devices-tun-tap-and-veth-pairs-explained/",target:"_blank",rel:"noopener noreferrer"}},[t._v("4"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://medium.com/@arpitkh96/basics-of-container-networking-with-linux-65607ea2377c#:~:text=VETH%20Pair%20between%20containers%3A%20This%20is%20one%20of,which%20we%20want%20to%20establish%20communication%20%28VETHN12%3C-%3EVETHN21%29.%20",target:"_blank",rel:"noopener noreferrer"}},[t._v("5"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Compose"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Docker官方的容器编排工具，用于定义和运行多个Docker容器的应用。即Docker容器的声明式管理技术（命令式管理太不方便），简化Docker指令的操作。")]),t._v(" "),s("p",[t._v("Docker由go语言编写，Docker Compose由Python编写，实际上调用了Docker 提供的API来对容器进行管理。")]),t._v(" "),s("p",[t._v("Docker Compose有两个重要的概念：")]),t._v(" "),s("ol",[s("li",[t._v("服务（service）：一个应用的容器，包含若干相同镜像的容器实例")]),t._v(" "),s("li",[t._v("项目（project）：由一组关联的应用容器组成的一个完整业务单元")])]),t._v(" "),s("h3",{attrs:{id:"安装-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/compose/install/#install-compose-on-linux-systems",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方安装"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -s"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -m"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /usr/local/bin/docker-compose\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 权限")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/docker-compose\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 软连接")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装成功")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" --version\n")])])]),s("h3",{attrs:{id:"docker-compose-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[t._v("#")]),t._v(" docker-compose.yml")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/compose-file-v3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编写指南"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("docker-compose config")]),t._v("可以对编写的docker-compose.yml文件进行验证")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.9"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my_config\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /redis_config\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'103'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'103'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0440")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("file")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./my_config.txt\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_other_config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("external")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("h3",{attrs:{id:"命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" --help\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" down\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" logs -f\n")])])]),s("h3",{attrs:{id:"网络-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.docker.com/compose/networking/",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("默认情况下，Compose会为应用程序设置单个网络。服务中的每个容器都会加入这个默认网络，并且既可由该网络上的其他容器到达，并在与容器名称相同的主机名中可被它们可发现。")]),t._v(" "),s("p",[t._v("您的应用程序的网络是基于“项目名称”的名称，它基于它所存在的目录的名称。您可以使用--project-name标志或compose_project_name环境变量覆盖项目名称。")]),t._v(" "),s("p",[t._v("除了使用默认的应用网络，可以使用networks指定自己的网络。这使您可以创建更复杂的拓扑并指定自定义网络驱动程序和选项。您还可以使用它来将服务连接到外部创建的网络，该网络无法由Compose管理。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网--传送门"),s("OutboundLink")],1)])],1)}),[],!1,null,null,null);e.default=r.exports}}]);